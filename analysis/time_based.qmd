```{r}
library(tidyverse)
library(here)
library(glue)
library(tidytext)
source("helpers.R")
```

This file looks at how activities change across time of day and across age

```{r}
df_cleaned <- read.csv(here("data", "all_contexts_cleaned.csv"))
df_cleaned_seconds <- df_cleaned |>
  rowwise() |>
  mutate(frame_num = list(seq(start_time+1, end_time))) |>
  unnest(frame_num) |>
  filter(Activity != "")
```
# time of day
```{r}
df_with_time <- df_cleaned %>%
  mutate(
    date_time = as.POSIXct(date_time, format = "%Y-%m-%d %H:%M:%S"),
    time_component = format(date_time, "%H:%M:%S"),   
    hour = as.numeric(format(date_time, "%H"))) |>
  # Remove rows where time is 00:00:00
  filter(time_component != "00:00:00" & !is.na(time_component)) %>%
    # Create time-of-day buckets (excluding 00:00:00)
    mutate(time_bucket = case_when(
      time_component == "00:00:00" ~ NA_character_,  # Ignore midnight times
      time_component >= "05:00:00" & time_component < "10:00:00" ~ "Early Morning (5-10am)",
      time_component >= "10:00:00" & time_component < "14:00:00" ~ "Late Morning (10am-2pm)",
      time_component >= "14:00:00" & time_component < "18:00:00" ~ "Afternoon (2-6pm)",
      time_component >= "18:00:00" & time_component < "22:00:00" ~ "Evening (6-10pm)",
      TRUE ~ NA_character_ #"Night (10pm-5am)" only around 5 hours of data here
    )) %>%
  # Remove rows where time is 00:00:00
  filter(!is.na(time_bucket))

# Calculate proportions within each time bucket
props_data <- bind_rows(
  # Activity proportions within each time bucket
  df_with_time %>%
    group_by(time_bucket) %>%
    count(Activity) %>%
    mutate(prop = n / sum(n),
           hours = sum(n) / 360,  # Calculate hours in this time bucket
           variable = "Activity",
           category = Activity,
           facet_label = paste0(time_bucket, "\n(", round(hours, 1), " hrs)")) %>%
    ungroup(),
  
  # Location proportions within each time bucket
  df_with_time %>%
    group_by(time_bucket) %>%
    count(Location) %>%
    mutate(prop = n / sum(n),
           hours = sum(n) / 360,  # Calculate hours in this time bucket
           variable = "Location",
           category = Location,
           facet_label = paste0(time_bucket, "\n(", round(hours, 1), " hrs)")) %>%
    ungroup()
)

# Reorder categories within each time bucket and variable
props_data <- props_data %>%
  group_by(time_bucket, variable) %>%
  mutate(category = reorder_within(category, -prop, paste(time_bucket, variable))) %>%
  ungroup()

# Create the plot
ggplot(props_data, aes(x = category, y = prop, fill = variable)) +
  geom_col() +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(title = "Activity and Location Proportions by Time of Day",
       x = NULL,
       y = "Proportion") +
  theme_minimal() +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 45, hjust = 1),
        strip.text = element_text(size = 9)) +
  facet_grid(variable ~ facet_label, scales = "free_x") +
  scale_x_reordered()
```

```{r}
# First, create 2-hour time buckets
df_with_time <- df_with_time %>%
  mutate(
    # Extract time component
    time_component = format(as.POSIXct(date_time), "%H:%M:%S"),
    hour = as.numeric(format(as.POSIXct(date_time), "%H"))
  ) %>%
  # Remove rows where time is 00:00:00
  filter(time_component != "00:00:00") %>%
    filter(!is.na(time_component)) |>
   mutate(
    time_bucket = case_when(
      hour >= 5 & hour < 21 ~ {
        start_hour <- ((hour - 5) %/% 2) * 2 + 5
        end_hour <- start_hour + 2
        start_label <- ifelse(start_hour < 12, paste0(start_hour, "am"), 
                             ifelse(start_hour == 12, "12pm", paste0(start_hour - 12, "pm")))
        end_label <- ifelse(end_hour < 12, paste0(end_hour, "am"), 
                           ifelse(end_hour == 12, "12pm", paste0(end_hour - 12, "pm")))
        paste0(start_label, "-", end_label)
      },
      TRUE ~ "9pm-5am"
    ),
    time_bucket = factor(
      time_bucket,
      levels = c("5am-7am", "7am-9am", "9am-11am", "11am-1pm", 
                 "1pm-3pm", "3pm-5pm", "5pm-7pm", "7pm-9pm", 
                 "9pm-5am")
    )
  ) %>%
  filter(!is.na(time_bucket))


# Find top 6 activities overall
#top_activities <- df_with_time %>%
#  count(Activity, sort = TRUE) %>%
 # slice_head(n = 6) %>%
#  pull(Activity)

# Create activity data with "Other" category
activity_time_data <- df_with_time %>%
  mutate(
    Activity_grouped = if_else(Activity %in% top_activities, Activity, "other")
  ) %>%
  group_by(time_bucket, Activity_grouped) %>%
  summarise(n = n(), activity_hours = n/360, .groups = "drop") %>%
  group_by(time_bucket) %>%
  mutate(
    prop = n / sum(n),
    total_hours = sum(n) / 360
  ) %>%
  ungroup() |>
  filter(total_hours > 25)

# Create the line plot
ggplot(activity_time_data |> filter(!(Activity_grouped %in% c("other"))), aes(x = time_bucket, y = prop, color = Activity_grouped, group = Activity_grouped)) +
  geom_line(size = 1) +
  geom_point(aes(size = activity_hours), alpha=0.5) +
  scale_y_continuous() +
  labs(title = "Activity Patterns Throughout the Day (2-hour buckets)",
       subtitle = "Top 6 activities shown",
       x = "Time of Day",
       y = "Proportion of Activities",
       color = "Activity") +
  theme_classic() +
  theme(legend.position = "right") +
  guides(size=guide_legend(title="Hours of activity"))
# exclude time bins that have less than 5 hours of data
```

## subject-level 
```{r}
subject_time_facet_plot <- function(df_with_time, 
                                     title = "Activity patterns throughout the day by subject",
                                     y = "Proportion of activity detections",
                                     min_total_hours = 20) {
  
  # Get total hours per subject across all time buckets
  total_hours <- df_with_time %>%
    group_by(subject_id) %>%
    summarize(subject_total_hours = n() / 360, .groups = "drop")  # Convert to hours (assuming 10-second intervals)
  
  # Create time-based activity data at subject level
  activity_time_data <- df_with_time %>%
    mutate(
      Activity_grouped = if_else(Activity %in% top_activities, Activity, "other")
    ) %>%
    group_by(subject_id, time_bucket, Activity_grouped) %>%
    summarise(n = n(), activity_hours = n/360, .groups = "drop") %>%
    group_by(subject_id, time_bucket) %>%
    mutate(
      prop = n / sum(n),
      bucket_total_hours = sum(n) / 360
    ) %>%
    ungroup() %>%
    rename(Activity = Activity_grouped) %>%
    left_join(total_hours, by = "subject_id") %>%
    # Only keep subjects with sufficient data
    filter(subject_total_hours > min_total_hours) %>%
    # Create subject labels with total hours
    mutate(subj_num = dense_rank(desc(subject_total_hours))) %>%
    arrange(subj_num) %>%
    mutate(
      subject_label = paste0(
        "Subj ", subj_num,
        " | total hours: ", round(subject_total_hours, 1)
      ),
      # Lock facet order by ranking
      subject_label = factor(subject_label, levels = unique(subject_label))
    ) %>%
    # Filter out "other" category for cleaner visualization
    filter(Activity != "other" & time_bucket != "9pm-5am" & bucket_total_hours > 2.5) |>
    group_by(subject_id) |>
    filter(n_distinct(time_bucket) > 3)
  
  # Create the plot
  ggplot(activity_time_data, aes(x = time_bucket, y = prop, color = Activity, group = Activity)) +
    geom_line(alpha = 0.7, size = 0.8) +
    geom_point(aes(size = activity_hours), alpha = 0.6) +
    facet_wrap(~ subject_label) +
    scale_y_continuous() +
    labs(
      title = title,
      x = "Time of Day",
      y = y,
      color = "Activity",
      size = "Hours per activity\nwithin time bucket"
    ) +
    theme_classic() +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1),
      legend.position = "right",
      strip.text = element_text(size = 8)
    ) +
    guides(
      color = guide_legend(override.aes = list(size = 3, alpha = 1)),
      size = guide_legend(title = "Hours per activity\nwithin time bucket")
    )
}
subject_time <- subject_time_facet_plot(df_with_time)

ggsave(here("figures/subject_time.png"), subject_time, width=10)
```

## activity-level
```{r}
activity_time_facet_plot <- function(df_with_time, 
                                     title = "Subject activity patterns throughout the day by activity type",
                                     y = "Proportion of time bucket",
                                     min_total_hours = 20) {
  
  # Get total hours per subject across all time buckets
  total_hours <- df_with_time %>%
    group_by(subject_id) %>%
    summarize(subject_total_hours = n() / 360, .groups = "drop")  # Convert to hours (assuming 10-second intervals)
  
  # Create time-based activity data at subject level
  activity_time_data <- df_with_time %>%
    mutate(
      Activity_grouped = if_else(Activity %in% top_activities, Activity, "other")
    ) %>%
    group_by(subject_id, time_bucket, Activity_grouped) %>%
    summarise(n = n(), activity_hours = n/360, .groups = "drop") %>%
    group_by(subject_id, time_bucket) %>%
    mutate(
      prop = n / sum(n),
      bucket_total_hours = sum(n) / 360
    ) %>%
    ungroup() %>%
    rename(Activity = Activity_grouped) %>%
    left_join(total_hours, by = "subject_id") %>%
    # Only keep subjects with sufficient data
    filter(subject_total_hours > min_total_hours) %>%
    # Create subject labels with total hours
    mutate(subj_num = dense_rank(desc(subject_total_hours))) %>%
    arrange(subj_num) %>%
    mutate(
      subject_label = paste0("Subj ", subj_num, " (", round(subject_total_hours, 1), "h)")
    ) %>%
    # Filter out "other" category and low-data periods
    filter(Activity != "other" & time_bucket != "9pm-5am" & bucket_total_hours > 2.5) %>%
    group_by(subject_id) %>%
    filter(n_distinct(time_bucket) > 3) %>%
    ungroup()
  
  # Create the plot
  ggplot(activity_time_data, aes(x = time_bucket, y = prop, color = subject_total_hours, group = subject_id)) +
    geom_line(alpha = 0.8, size = 0.9) +
    geom_point(aes(size = activity_hours), alpha = 0.7) +
    facet_wrap(~ Activity, scales = "free_y") +
    scale_color_viridis_c(name = "Total hours\nof data", option = "E", trans = "log10") +
    scale_y_continuous() +
    labs(
      title = title,
      x = "Time of Day",
      y = y,
      size = "Hours per activity\nwithin time bucket"
    ) +
    theme_classic() +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1),
      legend.position = "right",
      strip.text = element_text(size = 10, face = "bold"),
      legend.box = "vertical"
    ) +
    guides(
      color = guide_colorbar(title = "Total hours\nof data provided by participant"),
      size = "none"
    )
}

# Generate the plot
activity_time <- activity_time_facet_plot(df_with_time)
activity_time
ggsave(here("figures/activity_time.png"), activity_time, width = 12, height = 8)
```



# Prop of contexts across age
```{r}
filter_outliers_iqr <- function(data, value_col, factor = 1.5) {
  values <- data[[value_col]]
  
  Q1 <- quantile(values, 0.25, na.rm = TRUE)
  Q3 <- quantile(values, 0.75, na.rm = TRUE)
  IQR <- Q3 - Q1
  lower_bound <- Q1 - factor * IQR
  upper_bound <- Q3 + factor * IQR
  
  return(data[values >= lower_bound & values <= upper_bound, ])
}


calculate_proportions <- function(df, group_var, subject_id_col = "subject_id", 
                                 age_bin_col = "age_bin", total_frame_count_col = "total_frame_count") {
  
  # Calculate total hours by subject, group, and age
  hours_data <- df |>
    group_by(.data[[subject_id_col]], .data[[group_var]], .data[[age_bin_col]]) |>
    summarize(total_hours = n()/3600, .groups = "drop")
  
  # Calculate proportions by subject
  props_data <- df |>
    ungroup() |>
    summarize(
      prop = n() / first(.data[[total_frame_count_col]]), 
      hours = n()/3600,
      .by = c(.data[[subject_id_col]], .data[[age_bin_col]], .data[[group_var]])
    )
  
  return(list(hours_data = hours_data, props_data = props_data))
}

# Function to create summary statistics with confidence intervals
create_summary_stats <- function(props_data, hours_data, group_var, 
                                subject_id_col = "subject_id", age_bin_col = "age_bin") {
  
  # Join and calculate weighted confidence intervals
  summary_data <- props_data |>
    left_join(hours_data, 
              by = setNames(c(subject_id_col, group_var, age_bin_col), 
                           c(subject_id_col, group_var, age_bin_col))) |>
    group_by(.data[[age_bin_col]], .data[[group_var]]) |>
    group_modify(~ weighted_ci_normal_df(
      .x,
      value_col = "prop",
      weight_col = "total_hours",
      group_col = NULL
    )) |>
    ungroup() |>
    # Add total hours for each age/group combination
    left_join(
      hours_data |>
        group_by(.data[[age_bin_col]], .data[[group_var]]) |>
        summarize(total_hours = sum(total_hours), .groups = "drop"),
      by = setNames(c(age_bin_col, group_var), c(age_bin_col, group_var))
    )
  
  return(summary_data)
}

# Main analysis function
analyze_proportions_by_group <- function(df, 
                                        group_var, 
                                        total_frame_count_col = "total_frame_count",
                                        subject_id_col = "subject_id", 
                                        age_bin_col = "age_bin",
                                        exclude_age_bins = NULL,
                                        plot_title = NULL,
                                        plot_color_label = NULL,
                                        faceted = FALSE,
                                        remove_outliers = FALSE,
                                        outlier_factor = 1.5) {
  
  # Set default labels if not provided
  if (is.null(plot_title)) {
    plot_title <- paste(str_to_title(group_var), "Proportions Across Age Bins")
  }
  if (is.null(plot_color_label)) {
    plot_color_label <- str_to_title(group_var)
  }
  
  # Calculate proportions and hours
  calc_results <- calculate_proportions(df, group_var, subject_id_col, age_bin_col, total_frame_count_col)
  
  # Create summary statistics
  summary_data <- create_summary_stats(calc_results$props_data, calc_results$hours_data, 
                                      group_var, subject_id_col, age_bin_col)
  
  # Apply age bin exclusions if specified
  if (!is.null(exclude_age_bins)) {
    summary_data <- summary_data |> filter(!.data[[age_bin_col]] %in% exclude_age_bins)
    calc_results$props_data <- calc_results$props_data |> filter(!.data[[age_bin_col]] %in% exclude_age_bins)
  }
  
  # Create the plot
  p <- create_proportion_plot(summary_data, calc_results$props_data, group_var, 
                             age_bin_col, plot_title, plot_color_label, faceted,
                              remove_outliers, outlier_factor)
  
  # Return results
  return(list(
    summary = summary_data,
    plot = p,
    hours_data = calc_results$hours_data,
    props_data = calc_results$props_data
  ))
}

# Function to create the plot (handles both regular and faceted versions)
create_proportion_plot <- function(summary_data, props_data, group_var, age_bin_col, 
                                  plot_title, plot_color_label, faceted = FALSE,
                                   remove_outliers = FALSE, outlier_factor = 1.5) {
  
  base_plot <- ggplot()
  
  if (faceted) {
        facet_order <- summary_data %>%
      dplyr::group_by(.data[[group_var]]) %>%
      dplyr::summarise(avg_prop = mean(weighted_mean, na.rm = TRUE), .groups = "drop") %>%
      dplyr::arrange(desc(avg_prop)) %>%
      dplyr::pull(!!rlang::sym(group_var))
  
    props_data[[group_var]] <- factor(props_data[[group_var]], levels = facet_order)
    summary_data[[group_var]] <- factor(summary_data[[group_var]], levels = facet_order)
     if (remove_outliers) {
      props_data <- filter_outliers_iqr(props_data, "prop", outlier_factor)
     }
    
    # Add subject-level points for faceted version
    base_plot <- base_plot +
      geom_point(
        data = props_data,
        aes(
          x = .data[[age_bin_col]],
          y = prop,
          size = hours,
          color = .data[[group_var]]
        ),
        alpha = 0.4,
        position = position_jitter(width = 0.2, height = 0)
      )
  }
  
  # Add group-level summary elements
  base_plot <- base_plot +
    geom_smooth(
      data = summary_data,
      aes(x = .data[[age_bin_col]], y = weighted_mean, 
          group = .data[[group_var]], color = .data[[group_var]]),
      method = "lm", se = FALSE, alpha = 0.5
    ) +
    geom_point(
      data = summary_data,
      aes(x = .data[[age_bin_col]], y = weighted_mean, 
          color = .data[[group_var]], size = if(faceted) total_hours else NULL),
      position = position_dodge(width = 0.3)
    ) +
    geom_errorbar(
      data = summary_data,
      aes(x = .data[[age_bin_col]], ymin = ci_lower, ymax = ci_upper,
          color = .data[[group_var]]),
      position = position_dodge(width = 0.3),
      width = 0.2
    )
  
  # Add faceting if requested
  if (faceted) {
    base_plot <- base_plot + 
      facet_wrap(as.formula(paste("~", group_var)), scales = "free_y") +
      labs(size = "Hours of Data")
  }
  
  # Add common styling
  base_plot <- base_plot +
    labs(
      x = "Age Bin",
      y = "Proportion",
      color = plot_color_label,
      title = plot_title
    ) +
    theme_minimal()
  
  return(base_plot)
}

# Convenience wrapper functions for specific analyses
analyze_location_proportions <- function(df, faceted = FALSE, ...) {
  analyze_proportions_by_group(df, "Location", faceted = faceted, ...)
}

analyze_activity_proportions <- function(df, faceted = FALSE, ...) {
  analyze_proportions_by_group(df, "Activity", faceted = faceted, ...)
}
```

```{r}
activity_facet_plot_by_subject <- function(activity_data, 
                                            activities = c("playing", "watching tv", "reading", "eating"),
                                            title = "Activity proportions across age and subjects with at least 3 age bins",
                                            y = "Proportion") {
  
  # Get total hours per subject per age bin from hours_data
  total_hours <- activity_data$hours_data |>
    group_by(subject_id, age_bin) |>
    summarize(total_hours = sum(total_hours), .groups = "drop")
  
  # Filter for specified activities and join with total hours
  activity_props <- activity_data$props_data |>
    filter(Activity %in% activities) |>
    left_join(total_hours, by = c("subject_id", "age_bin")) |>
    group_by(subject_id) |>
    # Only keep subjects that have data for more than one age bin
    filter(n_distinct(age_bin) > 2) |>
    ungroup()
  
  # Lines connect true positions, points are jittered slightly
  ggplot(activity_props, aes(x = age_bin, y = prop, group = subject_id, color = subject_id)) +
    geom_line(alpha = 0.5) +
    geom_jitter(aes(size = total_hours), alpha = 0.8, width = 0.1, height = 0) +
    facet_wrap(~ Activity, scales = "free_y") +
    labs(
      title = title,
      x = "Age Bin (months)",
      y = "Proportion of activity detections",
      size = "Total hours within age bin per subject"
    ) +
    theme_minimal() +
    guides(color = "none")
}

subject_facet_plot_by_activity <- function(activity_data, 
                                            activities = c("playing", "watching tv", "reading", "eating", "walking", "looking at device", "exploring"),
                                            title = "Activity proportions across age and subjects with at least 3 age bins and 20 hours of data",
                                            y = "Proportion") {
  
  # Get total hours per subject across all age bins
  total_hours <- activity_data$hours_data |>
    group_by(subject_id) |>
    summarize(subject_total_hours = sum(total_hours), .groups = "drop")
  
  # Create "other" category for activities not in the specified list
  activity_props <- activity_data$props_data |>
    mutate(Activity_grouped = ifelse(Activity %in% activities, Activity, "other")) |>
    # Sum up "other" activities by subject, age_bin
    group_by(subject_id, age_bin, Activity_grouped) |>
    summarize(
      prop = sum(prop),
      hours = sum(hours),
      .groups = "drop"
    ) |>
    rename(Activity = Activity_grouped) |>
    left_join(total_hours, by = "subject_id") |>
    group_by(subject_id) |>
    # Only keep subjects that have data for more than 2 age bins and >20 total hours
    filter(n_distinct(age_bin) > 2 & subject_total_hours > 20) |>
    ungroup() |>
    mutate(subj_num = dense_rank(desc(subject_total_hours))) |>
  arrange(subj_num) |>
  mutate(
    subject_label = paste0(
      "Subj ", subj_num,
      " | total hours: ", round(subject_total_hours, 1)
    ),
    # lock facet order by ranking
    subject_label = factor(subject_label, levels = unique(subject_label))
  )
  
  # Lines connect true positions, points are jittered slightly
  ggplot(activity_props, aes(x = age_bin, y = prop, group = Activity, color = Activity)) +
    geom_line(alpha = 0.5) +
    geom_jitter(aes(size = hours), alpha = 0.8, width = 0.1, height = 0) +
    facet_wrap(~ subject_label) +
    labs(
      title = title,
      x = "Age Bin (months)",
      y = "Proportion of activity detections",
      size = "Hours per activity within age bin"
    ) +
    theme_minimal()
}
```

```{r}
contexts_avg <- df_cleaned_seconds |>
  filter(!is.na(location)) |>
  bin_age() |>
  rename(total_frame_count = total_count)
```

```{r}
location_results <- analyze_location_proportions(
  contexts_avg, 
  # max age
  exclude_age_bins = "30-36",
)
location_results$plot

location_faceted <- analyze_location_proportions(
  contexts_avg, 
  exclude_age_bins = "30-36",
  faceted = TRUE,
  remove_outliers=TRUE
)
location_faceted$plot

# Replace your activity analysis (regular plot)
activity_results <- analyze_activity_proportions(
  contexts_avg, 
  exclude_age_bins = "30-36"
)
activity_results$plot

# Get the faceted version
activity_faceted <- analyze_activity_proportions(
  contexts_avg, 
  exclude_age_bins = "30-36",
  faceted = TRUE,
  remove_outliers=FALSE
)
activity_faceted$plot
```

```{r}
activity_facet <- activity_facet_plot_by_subject(activity_results)
ggsave("activity_facet.png", activity_facet)
activity_facet
subject_facet <- subject_facet_plot_by_activity(activity_results)
ggsave("subject_facet.png", subject_facet, width=9)
subject_facet
```

Postural only
```{r}
ggplot(activity_results$summary |> filter(age_bin != "30-36") |> filter(Activity %in% c("being held", "crawling", "walking", "lying down", "sitting")), aes(x = age_bin, y = weighted_mean, color = Activity)) +
  geom_smooth(aes(group = Activity),
    alpha = 0.5, se=FALSE) +
    geom_point(method="lm", position = position_dodge(width = 0.3), aes(size=total_hours), alpha=0.7) +
  geom_errorbar(
    aes(ymin = ci_lower, ymax = ci_upper),
    position = position_dodge(width = 0.3),
    width = 0.2
  ) +
  labs(
    x = "Age Bin",
    y = "Proportion",
    color = "Activity",
    title = "Postural Proportions Across Age Bins"
  ) +
  theme_minimal()
```
crawling effect may still be of interest?
