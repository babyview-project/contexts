```{r}
library(here)
library(tidyverse)
library(stringr)
library(zoo)
```

```{r}
df <- read.csv(here("data", "all_contexts.csv")) |> mutate(superseded_gcp_name_feb25 = sub("_processed.*", "", video_id))
```
Average number of clips per video
```{r}
df |>
  count(superseded_gcp_name_feb25) |>   # gives counts per video
  summarize(avg_clips = mean(n), sd_clips = sd(n), n=n())
```

```{r}
library(lubridate)

recordings_processed_new <- read.csv(here("data", "recordings_processed_new.csv"))
df_cleaned_full <- df |> left_join(recordings) |> filter(is.na(superseded_blackout_checkbox)) |> left_join(recordings_processed_new |> transmute(blackout_region_new=blackout_region, subject_id, date_time=mdy_hm(date_time, tz = "UTC")))
```

```{r}
df_cleaned <- df_cleaned_full |>
  filter(Location != "") |>
  mutate(superseded_gcp_name_feb25 = sub("_processed.*", "", video_id),
         chunk_num = as.integer(sub(".*_(\\d+)\\.mp4", "\\1", basename(video_path))),
    start_time = chunk_num * 10,
    end_time = start_time + 10,
    chunk_num = chunk_num + 1) |>
  mutate(locations_avg = rollapply(Location, width = 3,
                                FUN = \(x) {
                                  ux <- unique(x)
                                  ux <- ux[!is.na(ux)]
                                  if (length(ux) == 0) return(NA)
                                  counts <- tabulate(match(x, ux))
                                  # break ties by favouring middle
                                  if (length(x) >= 3) {
                                    middle_val <- x[3]
                                    if (!is.na(middle_val) && middle_val %in% ux) {
                                      counts[which(ux == middle_val)] <- counts[which(ux == middle_val)] + 0.5
                                    }
                                  }
                                  ux[which.max(counts)]
                                },
                                partial = TRUE))
  
# smoothing
```

```{r}
write.csv(df_cleaned, here("data", "all_contexts_cleaned.csv"))
# public version without descriptions for now
write.csv(df_cleaned |> select(video_id, Location, Activity, superseded_gcp_name_feb25, duration_sec, age_mo, start_time, end_time, locations_avg), here("data", "all_contexts_public.csv"))
```